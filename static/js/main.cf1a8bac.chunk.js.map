{"version":3,"sources":["components/Game.js","helper.js","App.js","index.js"],"names":["Moves","Game","useState","nextMove","setNextMove","history","setHistory","endOfGame","setEndOfGame","boardSize","setBoardSize","moveNumber","setMoveNumber","resetGame","setResetGame","winnersCells","setWinnersCells","buildEmptyBoard","Array","fill","map","_","useEffect","toggleNextMove","currentMove","handleMove","x","y","currentBoardStateClone","cloneDeep","slice","isWinnersCells","value","board","filter","item","i","join","length","isWinner","boardHeader","className","disabled","onClick","console","log","JSON","stringify","htmlFor","name","id","onChange","event","newBoardSize","target","parseInt","size","row","classNames","cell","highlighted","includes","App","rootElement","document","getElementById","createRoot","render"],"mappings":"sNAMMA,EACD,IADCA,EAED,IAqIUC,EAlIF,WACX,MAAgCC,mBAASF,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAoCR,mBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAwCZ,mBAAS,IAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KAGMC,EAAkB,SAACR,GAAD,OACtBS,MAAMT,GACHU,KAAK,MACLC,KAAI,SAACC,GAAD,OAAOH,MAAMT,GAAWU,KAAK,KAA7B,GAHe,EAKxBG,qBAAU,WACRhB,EAAW,CAACW,EAAgBR,KAC5BL,EAAYJ,GACZY,EAAc,GACdJ,GAAa,GACbQ,EAAgB,GACjB,GAAE,CAACP,EAAWI,IAEf,IASMU,EAAiB,WACrBnB,GAAY,SAACoB,GAAD,OAAkBA,IAAgBxB,EAAUA,EAAUA,CAAtD,IACZY,GAAc,SAACD,GAAD,OAAgBA,EAAa,CAA7B,GACf,EAEKc,EAAa,SAACC,EAAGC,GACrB,IACMC,EADaP,IAAEQ,UAAUxB,GACaM,GAC5CiB,EAAuBF,GAAGC,GAAKxB,EAE/BoB,IAEAjB,EAAW,GAAD,mBAAKD,EAAQyB,MAAM,EAAGnB,EAAa,IAAnC,CAAuCiB,KAEjD,IAAMG,ECzDc,SAACL,EAAGC,EAAGK,EAAOC,EAAOxB,GAE3C,OACEwB,EAAMC,QACJ,SAACC,EAAMC,GAAP,OACEA,EAAI3B,IAAciB,GAClBS,EAAKE,KAAK,MAAQnB,MAAMT,GAAWU,KAAKa,GAAOK,KAAK,GAFtD,IAGAC,OAAS,EAEJpB,MAAMT,GACVU,KAAKa,GACLZ,KAAI,SAACC,EAAGe,GAAJ,gBAAaV,EAAb,YAAkBU,EAAlB,IAILH,EAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKR,KAAOK,CAAtB,IAA6BM,SAAW7B,EAChDS,MAAMT,GACVU,KAAKa,GACLZ,KAAI,SAACC,EAAGe,GAAJ,gBAAaA,EAAb,YAAkBT,EAAlB,IAGLM,EAAMC,QAAO,SAACC,EAAMC,GAAP,OAAaD,EAAKC,KAAOJ,CAAzB,IAAgCM,SAAW7B,EACnDS,MAAMT,GACVU,KAAKa,GACLZ,KAAI,SAACC,EAAGe,GAAJ,gBAAaA,EAAb,YAAkBA,EAAlB,IAKPH,EAAMC,QAAO,SAACC,EAAMC,GAAP,OAAaD,EAAK1B,EAAY2B,EAAI,KAAOJ,CAAzC,IAAgDM,SAC7D7B,EAEOS,MAAMT,GACVU,KAAKa,GACLZ,KAAI,SAACC,EAAGe,GAAJ,gBAAaA,EAAb,YAAkB3B,EAAY2B,EAAI,EAAlC,IAGF,EACR,CDmB0BG,CACrBb,EACAC,EACAxB,EACAyB,EACAnB,GAEIsB,EAAeO,SACnBtB,EAAgBe,GAChBvB,GAAa,GAEhB,EAQKgC,EACJ,gCACGnC,EAAQiC,OAAS,GAAK/B,GAAa,+CACpC,sBAAKkC,UAAU,eAAf,UACE,wBACEC,SAAyB,IAAf/B,GAAoBJ,EAC9BoC,QAZe,WACrB/B,GAAc,SAACD,GAAD,OAAgBA,EAAa,CAA7B,IACdL,EAAW,YAAID,EAAQyB,MAAM,EAAGnB,KAChCY,GACD,EAMK,yBAMA,wBAAQoB,QApDU,WACtB7B,GAAcD,EACf,EAkDK,gCAKN,OAAKR,EAAQiC,QAGbM,QAAQC,IAAIC,KAAKC,UAAU1C,GAAUM,GAEnC,sBAAK8B,UAAU,OAAf,UACE,sBAAKA,UAAU,SAAf,UACE,uBAAOO,QAAQ,aAAf,iCACA,wBACEC,KAAK,YACLC,GAAG,aACHlB,MAAOvB,EACP0C,SAjEsB,SAACC,GAC7B,IAAMC,EAAeD,EAAME,OAAOtB,MAClCtB,EAAa6C,SAASF,EAAc,IACrC,EA0DK,SAhFa,CAAC,EAAG,EAAG,GAsFNjC,KAAI,SAACoC,EAAMpB,GAAP,OACd,wBAAgBJ,MAAOwB,EAAvB,SACGA,GADUpB,EADC,SAQpB,sBAAKK,UAAU,QAAf,UACGD,EACD,8BACGnC,EAAQM,GAAYS,KAAI,SAACqC,EAAK/B,GAC7B,OACE,qBAAae,UAAU,MAAvB,SACGgB,EAAIrC,KAAI,SAACY,EAAOL,GAAR,OACP,wBAEEc,UAAWiB,IAAW,CACpBC,MAAM,EACNC,YAAa7C,EAAa8C,SAAb,UAAyBnC,EAAzB,YAA8BC,MAE7Ce,SAAUV,GAASzB,EACnBoC,QAAS,kBAAMlB,EAAWC,EAAGC,EAApB,EAPX,SASE,+BAAOK,KATT,UACUN,EADV,YACeC,GAFR,KADDD,EAgBb,aA1CA,yCA+CV,EEvIc,SAASoC,IACtB,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,KAGL,CCLD,IAAMsB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACL,EAAD,M","file":"static/js/main.cf1a8bac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { isWinner } from \"../helper\";\r\n\r\nconst Moves = {\r\n  X: \"X\",\r\n  O: \"O\"\r\n};\r\n\r\nconst Game = () => {\r\n  const [nextMove, setNextMove] = useState(Moves.X);\r\n  const [history, setHistory] = useState([]);\r\n  const [endOfGame, setEndOfGame] = useState(false);\r\n  const [boardSize, setBoardSize] = useState(3);\r\n  const [moveNumber, setMoveNumber] = useState(0);\r\n  const [resetGame, setResetGame] = useState(false);\r\n  const [winnersCells, setWinnersCells] = useState([]);\r\n  const boardSizes = [3, 4, 5];\r\n\r\n  const buildEmptyBoard = (boardSize) =>\r\n    Array(boardSize)\r\n      .fill(null)\r\n      .map((_) => Array(boardSize).fill(null));\r\n\r\n  useEffect(() => {\r\n    setHistory([buildEmptyBoard(boardSize)]);\r\n    setNextMove(Moves.X);\r\n    setMoveNumber(0);\r\n    setEndOfGame(false);\r\n    setWinnersCells([]);\r\n  }, [boardSize, resetGame]);\r\n\r\n  const handleResetGame = () => {\r\n    setResetGame(!resetGame);\r\n  };\r\n\r\n  const handleBoardSizeChange = (event) => {\r\n    const newBoardSize = event.target.value;\r\n    setBoardSize(parseInt(newBoardSize, 10));\r\n  };\r\n\r\n  const toggleNextMove = () => {\r\n    setNextMove((currentMove) => (currentMove === Moves.X ? Moves.O : Moves.X));\r\n    setMoveNumber((moveNumber) => moveNumber + 1);\r\n  };\r\n\r\n  const handleMove = (x, y) => {\r\n    let historyClone = _.cloneDeep(history);\r\n    const currentBoardStateClone = historyClone[moveNumber];\r\n    currentBoardStateClone[x][y] = nextMove;\r\n\r\n    toggleNextMove();\r\n\r\n    setHistory([...history.slice(0, moveNumber + 1), currentBoardStateClone]);\r\n\r\n    const isWinnersCells = isWinner(\r\n      x,\r\n      y,\r\n      nextMove,\r\n      currentBoardStateClone,\r\n      boardSize\r\n    );\r\n    if (!!isWinnersCells.length) {\r\n      setWinnersCells(isWinnersCells);\r\n      setEndOfGame(true);\r\n    }\r\n  };\r\n\r\n  const handleStepBack = () => {\r\n    setMoveNumber((moveNumber) => moveNumber - 2);\r\n    setHistory([...history.slice(0, moveNumber)]);\r\n    toggleNextMove();\r\n  };\r\n\r\n  const boardHeader = (\r\n    <div>\r\n      {history.length > 1 && endOfGame && <div>End of Game!</div>}\r\n      <div className=\"board-header\">\r\n        <button\r\n          disabled={moveNumber === 0 || endOfGame}\r\n          onClick={handleStepBack}\r\n        >\r\n          &#8610; Back\r\n        </button>\r\n        <button onClick={handleResetGame}>Reset &#8634;</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (!history.length) {\r\n    return <div>Loading</div>;\r\n  }\r\n  console.log(JSON.stringify(history), moveNumber);\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"header\">\r\n        <label htmlFor=\"board-size\">Set the Board Size:</label>\r\n        <select\r\n          name=\"boardSize\"\r\n          id=\"board-size\"\r\n          value={boardSize}\r\n          onChange={handleBoardSizeChange}\r\n        >\r\n          {boardSizes.map((size, i) => (\r\n            <option key={i} value={size}>\r\n              {size}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"board\">\r\n        {boardHeader}\r\n        <div>\r\n          {history[moveNumber].map((row, x) => {\r\n            return (\r\n              <div key={x} className=\"row\">\r\n                {row.map((value, y) => (\r\n                  <button\r\n                    key={`${x}-${y}`}\r\n                    className={classNames({\r\n                      cell: true,\r\n                      highlighted: winnersCells.includes(`${x}-${y}`)\r\n                    })}\r\n                    disabled={value || endOfGame}\r\n                    onClick={() => handleMove(x, y)}\r\n                  >\r\n                    <span>{value}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","export const isWinner = (x, y, value, board, boardSize) => {\r\n  //horizontal winner\r\n  if (\r\n    board.filter(\r\n      (item, i) =>\r\n        i % boardSize === x &&\r\n        item.join(\"\") === Array(boardSize).fill(value).join(\"\")\r\n    ).length > 0\r\n  ) {\r\n    return Array(boardSize)\r\n      .fill(value)\r\n      .map((_, i) => `${x}-${i}`);\r\n  }\r\n\r\n  //vertical winner\r\n  if (board.filter((item) => item[y] === value).length === boardSize) {\r\n    return Array(boardSize)\r\n      .fill(value)\r\n      .map((_, i) => `${i}-${y}`);\r\n  }\r\n  //left-right diagonal winner\r\n  if (board.filter((item, i) => item[i] === value).length === boardSize) {\r\n    return Array(boardSize)\r\n      .fill(value)\r\n      .map((_, i) => `${i}-${i}`);\r\n  }\r\n\r\n  //right-left diagonal winner\r\n  if (\r\n    board.filter((item, i) => item[boardSize - i - 1] === value).length ===\r\n    boardSize\r\n  ) {\r\n    return Array(boardSize)\r\n      .fill(value)\r\n      .map((_, i) => `${i}-${boardSize - i - 1}`);\r\n  }\r\n\r\n  return [];\r\n};\r\n","import \"./styles.css\";\n\nimport Game from \"./components/Game\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}